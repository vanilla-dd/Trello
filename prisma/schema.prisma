// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  Owner
  Watcher
  Coworker
}

enum SubscriptionType {
  Free
  Pro
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Define the User table
model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  boardLimitUsed   Int                @default(0)
  boardMemberships BoardMembership[]
  accounts         Account[]
  boards           Board[]
  sessions         Session[]
  Card             Card[]
  Comment          Comment[]
  Activity         Activity[]
  UserSubscription UserSubscription[]

  @@index([email, id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Define the Board table
model Board {
  id            String            @id @default(uuid())
  title         String
  isPublic      Boolean           @default(true)
  members       BoardMembership[]
  users         User[]
  lists         List[]
  activities    Activity[]
  imageId       String
  imageThumbUrl String
  imageFullUrl  String
  imageUserName String
  imageLinkHTML String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BoardMembership {
  userId  String
  boardId String
  role    Role
  user    User   @relation(fields: [userId], references: [id])
  Board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@id([userId, boardId]) // Compound unique constraint
}

// Define the List table
model List {
  id        String     @id @default(uuid())
  title     String
  board     Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  position  Int
  cards     Card[]
  Activity  Activity[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([boardId])
}

// Define the Card table
model Card {
  id          String       @id @default(uuid())
  title       String
  content     String?
  position    Int
  list        List         @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId      String
  assignedTo  User?        @relation(fields: [userId], references: [id])
  attachments Attachment[]
  comments    Comment[]
  checklist   Checklist?
  userId      String?
  Activity    Activity[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([listId])
}

// Define the Attachment table
model Attachment {
  id       String @id @default(uuid())
  filename String
  url      String
  card     Card   @relation(fields: [cardId], references: [id])
  cardId   String
}

// Define the Checklist table
model Checklist {
  id     Int             @id @default(autoincrement())
  title  String
  card   Card            @relation(fields: [cardId], references: [id])
  cardId String          @unique
  items  ChecklistItem[]
}

// Define the ChecklistItem table
model ChecklistItem {
  id          Int        @id @default(autoincrement())
  content     String
  isChecked   Boolean
  checklist   Checklist  @relation(fields: [checklistId], references: [id])
  checklistId Int
  Activity    Activity[]
}

// Define the Comment table
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
}

// Define the Activity table
model Activity {
  id              Int            @id @default(autoincrement())
  action          String
  createdAt       DateTime       @default(now())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  board           Board          @relation(fields: [boardId], references: [id])
  boardId         String
  list            List?          @relation(fields: [listId], references: [id])
  listId          String?
  card            Card?          @relation(fields: [cardId], references: [id])
  cardId          String?
  checklistItem   ChecklistItem? @relation(fields: [checklistItemId], references: [id])
  checklistItemId Int?
}

// Define All Subscription model
model AllSubscription {
  id                    String                  @id
  active                Boolean
  name                  String
  image                 String?
  description           String?
  metadata              Json
  AllSubscriptionPrices AllSubscriptionPrices[]
}

// All subscription prices
model AllSubscriptionPrices {
  id                String          @id
  product           AllSubscription @relation(fields: [allSubscriptionId], references: [id])
  allSubscriptionId String
  active            Boolean
  description       String?
  unit_amount       Int?
  currency          String
  type              String
  interval          String?
  interval_count    Int?
  metadata          Json
}

// Define UserSubscription model
model UserSubscription {
  type                     SubscriptionType @default(Pro)
  status                   String?
  quantity                 Int              @default(1)
  cancelOnExpire           Boolean          @default(false) @map(name: "cancel_at_period_end")
  stripeCustomerId         String?          @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId     String?          @unique @map(name: "stripe_subscription_id")
  stripePriceId            String?          @map(name: "stripe_price_id")
  stripeCurrentPeriodstart DateTime?        @map(name: "stripe_current_period_start")
  stripeCurrentPeriodEnd   DateTime?        @map(name: "stripe_current_period_end")
  cancelAt                 DateTime?
  canceledAt               DateTime?
  metadata                 Json?
  createdAt                DateTime         @default(now())
  endedAt                  DateTime?
  updatedAt                DateTime         @updatedAt
  user                     User             @relation(fields: [userId], references: [id])
  userId                   String           @id
}
